# how linux works

* kernel: in charge of coordinating all the hardware attached to the cpu
    * see Computer Pioneers and BBC History of Computers on youtube
* modern programs need to run in a multi-threaded env, meaning using multiple cpu cores independently at the same time
* top (shell command) shows resource usage and processes
* research cpu management, storage, process i/o
    * a badly written program will hog cpu by only using one core
* pwd - print working directory

Unix/Linux 
    * the fundamental abstraction/interface: everything is a file (actually, an inode)
    * everything is running as a process; a process is just anything that runs on a computer
    * in order to coordinate between the hardware devices and what the user wants (output), the OS/kernel uses the idea of the process
    * kubernetes is an abstraction that directly models the OS for IT
    
processes
    * when the computer boots it starts the BIOS (basic input/output system), which is a tiny chip with a tiny OS whose sole job is to boot into another OS
    * BIOS is told which device to boot the OS from; BIOS can even load an OS entirely over a network, but usually it boots a OS on local storage
    * the first process that the linux kernel runs is /sbin/init; PID 1; this and all running processes are essentially just looping to do something
    * init then communicates and fires up everything else
    * everything running on your computer has a parent process; init is the parent of all processes
    * when you run a program, it is a process until it dies; when it dies it's memory goes away, so unless something was written to disk it doesn't exist anymore

/proc
    * /proc is a virtual file system; there are no actual files there, /proc represents processes that are running as files
    * an inode is an [index node] (https://linuxhandbook.com/inode-linux/)
        * inode = the metadata, excluding the file name and data itself
        * i.e. size, permission, owner/group, location, date/time, any other info needed
    * ls /proc lists the processes that are running, represented as files
    * pstree command is actually looking at the /proc filesystem 
        * use pstree|more for more detailed info
        
system calls
    * linux at its core is looking at the world in terms of processes that are running, memory that is being used by those processes, and representing that to the end user as files
    * underneath the hood: when you run a program what it does is send communications to the kernel through system calls
    * you can trace a running process and you can see what system calls its using, how it's communicating with the kernel
        * this allows you to see why a program is messing up, or audit a program to see if it is phoning home to someone malicious on the internet, etc
    * every single programming language tells the kernel what to do using system calls, including opening files, opening network connection, sending data, etc
